#!/bin/sh
# -----------------------------------------------------------------------------
# Copyright 2003-2011 Mark Olesen
#
#     This file is part of flex-grid.
#
#     flex-grid is free software: you can redistribute it and/or modify it under
#     the terms of the GNU Affero General Public License as published by the
#     Free Software Foundation, either version 3 of the License,
#     or (at your option) any later version.
#
#     flex-grid is distributed in the hope that it will be useful, but
#     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#     or FITNESS FOR A PARTICULAR PURPOSE.
#     See the GNU Affero General Public License for more details.
#
#     You should have received a copy of the GNU Affero General Public License
#     along with flex-grid. If not, see <http://www.gnu.org/licenses/>.
# ------------------------------------------------------------------------------
# Script
#     qloadsensor
#
# Description
#     load sensor for particular file systems and floating licenses
#
# Note
#     1) add the new complexes (via qconf -mc) for the following:
#         * complex configurations managed in the shell script
#           eg, 'perl -x qloadsensor'
#         * complex consumables managed global
#           eg, 'qlicserver -c'
#     2) initialize the global complex consumables to be managed
#           eg, 'qlicserver -C'
#
# -----------------------------------------------------------------------------

#
# impose default GridEngine environment + ascertain the binary architecture
#
# you likely don't need to adjust these values, since the loadsensor is called
# from sge_execd, which in turn is started from /etc/init.d/n1ge and
# these variables should be correctly exported there
#
[ -d "$SGE_ROOT" ] || { echo "Error: SGE_ROOT=$SGE_ROOT not found"; exit 1; }
: ${SGE_CELL:=default}
: ${SGE_ARCH:=`$SGE_ROOT/util/arch`}

export SGE_ROOT SGE_CELL SGE_ARCH

# Most of these settings would typically be placed in the $SGE_site/environ
# file which is sourced further below.
#
# The SGE_site directory can be used to hold all of our site-specific
# configuration information, prolog/epilog scripts etc.
# You may need to adjust this for your setup.
#
SGE_common=$SGE_ROOT/$SGE_CELL/common
SGE_utilbin=$SGE_ROOT/utilbin/$SGE_ARCH
SGE_site=$SGE_ROOT/$SGE_CELL/site
export SGE_common SGE_utilbin SGE_site

# -----------------------------------------------------------------------------
# this script should run as the 'admin_user' registered in 'bootstrap'
#
if [ "$UID" -eq 0 ]
then
    admin_user=$(sed -ne 's/^admin_user *//p' $SGE_common/bootstrap)
    : ${admin_user:=root}
    if [ $admin_user != root -a $(echo $admin_user | tr "A-Z" "a-z") != none ]
    then
        exec $SGE_utilbin/adminrun $admin_user $0
    fi
fi

# <settings>
# ========================================================================
# now that we are the admin_user, we can source our standard settings
#   - customize *all* settings there (eg, license server settings)
#   - ENSURE THAT '$SGE_site' IS DEFINED !!!
#
# The '$SGE_site/environ' provides a central means of defining relevant
# environment variables such as the LM_LICENSE_FILE (should point to the
# licence servers) and adjustments to the PATH (eg, to find the 'lmutil'
# binary).
#
# While many of these adjustments can be set within the qlicserver.config file,
# the $SGE_site/environ can be useful to source from within job scripts.
#
for i in $SGE_site/environ; do [ -f $i ] && . $i; done

# define (unique) cluster name if not already defined
if [ -z "$SGE_CLUSTER_NAME" -a -r "$SGE_common/cluster_name" ]
then
    SGE_CLUSTER_NAME=$(cat $SGE_common/cluster_name 2>/dev/null)
fi
: ${SGE_CLUSTER_NAME:=default}
export SGE_CLUSTER_NAME

#
# ========================================================================
# </settings>

###############################################################################
###############################################################################
# CUSTOMIZE THESE SETTINGS - iff. required

qlicserverOutDir="$SGE_site/cache"
qlicserver="$SGE_site/qlicserver dir=$qlicserverOutDir output=qlicserver.xml qhost=qhost.xml qstat=qstat.xml"
## diskmon="$SGE_site/diskmon.pl"

# END OF CUSTOMIZE SETTINGS
###############################################################################
###############################################################################

#
# set some constants
#
HOST=$($SGE_utilbin/gethostname -aname)
UQHOST=$(echo $HOST | cut -f1 -d.)
SGE_qmaster=unknown; export SGE_qmaster

#
# the real (not compiled in) architecture
#
os_arch=`$SGE_ROOT/util/arch`

# -----------------------------------------------------------------------------
# act_qmaster
#
# extract the unqualified host name from the "act_qmaster" file
# return this value or 'unknown' on failure
#
act_qmaster()
{
    tmp=$(cat $SGE_common/act_qmaster 2>/dev/null)
    echo ${tmp:-unknown}
}

# -----------------------------------------------------------------------------
# df_info
#
# echo the $1_{total,used,free} space on filesystem $2
#
# gridengine uses the suffixes
#   'k' => blocksize 1000
#   'K' => blocksize 1024
#
# POSIX 'df' allows '-k' for blocksize 1024
#
# return 0 if 'df' fails
df_info()
{
    # 1:tag 2:mount 3:filesys 4:total 5:Used 6:Avail 7:Used% 8:Mount
    [ -d "$2" ]    && set -- $1 $2 $( df -k $2 2>/dev/null | tail -1 )

    #!# we could add the following check:
    #!# [ "$2" != "$8" ] && set -- $1 $2;        # mount point mismatch?

    [ "$#" -ge 6 ] || set -- $1 $2 filesystem 0 0 0

    echo "$UQHOST:$1_total:$4K"
    echo "$UQHOST:$1_used:$5K"

    if [ -w "$2" ]
    then
        echo "$UQHOST:$1_free:$6K"
    else
        echo "$UQHOST:$1_free:0"
    fi
}

# invariant values
if [ -e "/proc/cpuinfo" ]
then
    mips=$(awk '{if (/mips/) printf "%.0f\n", $NF}' /proc/cpuinfo | tail -1)
else
    mips=0
fi

unset os_name
if [ -e "/etc/SuSE-release" ]
then
    # extract VERSION = 11.2 => suse11.2
    os_name=$(sed -ne 's/^VERSION *= */suse/p' /etc/SuSE-release 2>/dev/null)
elif [ -e "/etc/redhat-release" ]
then
    # extract Red Hat Enterprise Linux release X ... Update Y => rheX.Y
    os_name=$(sed -ne 's/^.*release *\([0-9][0-9]*\).*Update *\([0-9][0-9]*\).*$/rhe\1\.\2/p' /etc/redhat-release 2>/dev/null)
fi
: ${os_name:=NONE}

# -----------------------------------------------------------------------------
# host_info
#
# report host specific information about filesystems, logins,
# special hardware extensions, etc.
#
host_info()
{
    echo "$UQHOST:arch:$os_arch"
    echo "$UQHOST:os:$os_name"
    df_info      tmp     /tmp
    echo "$UQHOST:mips:$mips"
}

# -----------------------------------------------------------------------------
# iidle_info()
# report a machine's idle time
#
# parse the contents from /proc/interrupts, which looks like the following:
#
#            CPU0
#   0:   23024789          XT-PIC  timer
#   1:         13          XT-PIC  keyboard
#   2:          0          XT-PIC  cascade
#   5:          0          XT-PIC  usb-uhci
#   8:          2          XT-PIC  rtc
#   9:          0          XT-PIC  acpi
#  10:          0          XT-PIC  ehci-hcd, usb-uhci
#  11:   16687253          XT-PIC  eth0, usb-uhci, Intel 82801DB-ICH4, nvidia
#  12:         20          XT-PIC  PS/2 Mouse
#  14:      77178          XT-PIC  ide0
#  15:          2          XT-PIC  ide1
# NMI:          0
# LOC:          0
# ERR:          0
# MIS:          0
#
# or,
#
#            CPU0       CPU1
#   0:   12820049   12818168    IO-APIC-edge  timer
#   1:      42889      43309    IO-APIC-edge  keyboard
#   2:          0          0          XT-PIC  cascade
#   8:          2          0    IO-APIC-edge  rtc
#   9:          0          0    IO-APIC-edge  acpi
#  12:     287235     296531    IO-APIC-edge  PS/2 Mouse
#  14:      47423      40923    IO-APIC-edge  ide0
#  15:          2          3    IO-APIC-edge  ide1
#  16:    7733868    7737081   IO-APIC-level  nvidia
#  17:        159        156   IO-APIC-level  Intel ICH 82801AA
#  19:    2155710    2159943   IO-APIC-level  e100, usb-uhci
# NMI:          0          0
# LOC:   25641034   25641033
# ERR:          0
# MIS:          0
#
# Thus, we need the [-1, 1..$ncpu] fields for the following sources:
# keyboard, Mouse, serial
#
# NB: adding 'usb-uhci' gives problems, since this is sometimes
# attached to the ethernet card
#
# set the variable 'iidle' to the idle time (seconds) since the last call
#
last="0 -1";
iidle_info()
{
    set -- $(
    perl -e '
        my @last = @ARGV;
        @ARGV = "/proc/interrupts";
        $_    = <>;

        my $ncpu = s/\s*CPU\d+//g || 0;
        my ( $iidle, $int, $now ) = ( 0, 0, time );

        $int += $_
          for
          map { /\s+(keyboard|Mouse|serial)$/ ? (split)[ 1 .. $ncpu ] : (); }
          <>;

        if ( $int == $last[-1] ) {    # no interactivity since last round
            $iidle = ( $now - $last[0] );
        }
        else {
            @last = ( $now, $int );
        }

        print "$iidle @last\n";
    ' $last
    );

    echo "$UQHOST:iidle:$1";

    shift; last="$@";   # save for later
}
# -----------------------------------------------------------------------------
#
# The execd running on the qmaster queries the license server
# The contents of 'act_qmaster' should suffice to migrate the load sensor
# for a controlled migration.
#

while :
do
    read input || exit 1         # wait for input
    [ "$input" = quit ] && exit 0

    echo begin                   # begin load report
    host_info                    # host information
##    iidle_info                   # machine's idle time
    echo end                     # end load report

    # let the license query run between load reports
    SGE_qmaster=`act_qmaster`    # refresh the name of the qmaster
    if [ "$HOST" = "$SGE_qmaster" ]
    then
        $qlicserver 2>> $qlicserverOutDir/qloadsensor.err
##        $diskmon -m 2>> $qlicserverOutDir/qloadsensor.err
        # force rescheduling of express jobs
##        $SGE_site/qxprs >/dev/null 2>&1
##    else
##        $diskmon 2>> $qlicserverOutDir/qloadsensor.err
    fi
done
exit 0    # we never get here, but just in case

#------------------------------------------------------------------------------
# feed via 'perl -x' to extract the 'host' complex configuration

#!/usr/bin/perl -w
print <DATA>
__DATA__
#
# host complex configuration
#
#name         shortcut  type   relop requestable consumable default  urgency
#---------------------------------------------------------------------------
tmp_total      tmpt     MEMORY  <=   YES         NO         0        0
tmp_used       tmpu     MEMORY  >=   NO          NO         0        0
tmp_free       tmpf     MEMORY  <=   YES         NO         0        0
iidle          iidle    INT     <=   YES         NO         0        0
mips           mips     INT     <=   YES         NO         0        0
os             os       RESTRING ==  YES         NO         NONE     0
# -----------------------------------------------------------------------------
